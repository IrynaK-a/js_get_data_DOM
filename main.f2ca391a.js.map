{"version":3,"sources":["scripts/main.js"],"names":["ThousandsSeparator","number","stringNumber","String","digit","count","i","length","population","document","querySelectorAll","numbers","el","push","innerHTML","total","reduce","sum","current","split","join","average","querySelector","separate"],"mappings":";AAAA,aAwCA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,IAAA,CAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAtCMA,IAsCN,EAtCMA,EAAAA,WAsCN,SAAA,IAAA,EAAA,KAAA,GAAA,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,WArCWC,MAAAA,SAAAA,GAKF,IAJCC,IAAAA,EAAeC,OAAOF,GACxBG,EAAQ,GACRC,EAAQ,EAEHC,EAAIJ,EAAaK,OAAS,EAAGD,GAAK,EAAGA,IACxCD,EAAQ,GAAM,GAAe,IAAVA,GACrBD,EAAQ,IAAMA,EACdC,EAAQ,IAERD,EAAQF,EAAaI,GAAKF,EAC1BC,KAIGD,OAAAA,MAsBX,EAtCMJ,GAoBAQ,EAAaC,SAASC,iBAAiB,mBACvCC,EAAU,GAECH,EAAAA,EAAAA,GAejB,IAf6B,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAlBI,IAAAA,EAAkB,EAAA,MAC3BD,EAAQE,KAAKD,EAAGE,YAclB,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAXA,IAAMC,EAAQJ,EAAQK,OAAO,SAACC,EAAKC,GAG1BD,OAAAA,IAFgBC,EAAQC,MAAM,KAAKC,KAAK,KAG9C,GAEGC,EAAUN,EAAQJ,EAAQJ,OAEhCE,SAASa,cAAc,qBAAqBR,WACxC,IAAId,GAAqBuB,SAASR,GAEtCN,SAASa,cAAc,uBAAuBR,WAC1C,IAAId,GAAqBuB,SAASF","file":"main.f2ca391a.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nclass ThousandsSeparator {\n  separate(number) {\n    const stringNumber = String(number);\n    let digit = '';\n    let count = 0;\n\n    for (let i = stringNumber.length - 1; i >= 0; i--) {\n      if (count % 3 === 0 && count !== 0) {\n        digit = ',' + digit;\n        count = 0;\n      } else {\n        digit = stringNumber[i] + digit;\n        count++;\n      }\n    }\n\n    return digit;\n  }\n}\n\nconst population = document.querySelectorAll('span.population');\nconst numbers = [];\n\nfor (const el of population) {\n  numbers.push(el.innerHTML);\n}\n\nconst total = numbers.reduce((sum, current) => {\n  const currentNumber = +current.split(',').join('');\n\n  return sum + currentNumber;\n}, 0);\n\nconst average = total / numbers.length;\n\ndocument.querySelector('.total-population').innerHTML\n  = new ThousandsSeparator().separate(total);\n\ndocument.querySelector('.average-population').innerHTML\n  = new ThousandsSeparator().separate(average);\n"]}